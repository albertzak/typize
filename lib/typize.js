// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var captureInput, info, keyup, sanitizeLines, stylizeLines, typize, view,
      _this = this;
    typize = $('#typize');
    view = $(window);
    info = $('#info');
    if (localStorage.getItem('typize_content')) {
      typize.html(localStorage.getItem('typize_content'));
    }
    typize.bind('input propertychange', keyup = function() {
      captureInput();
      return localStorage.setItem('typize_content', typize.html());
    });
    typize.keyup = function(k) {
      if (k.keyCode === 13) {
        return k.preventDefault();
      }
    };
    captureInput = function() {
      typize.lines = typize.children();
      info.html('');
      return stylizeLines(sanitizeLines(typize.lines));
    };
    stylizeLines = function(lineDescriptor) {
      var lineLengths, lines, printDebug;
      lines = lineDescriptor[0];
      lineLengths = lineDescriptor[1];
      return lines.forEach(printDebug = function(line, i) {
        info.html(info.html() + line.text() + ', trueLength: ' + lineLengths[i] + '<br>');
        switch (lineLengths[i]) {
          case 0:
            return line.addClass('lt1');
          case 1:
            return line.addClass('lt2');
          case 2:
            return line.addClass('lt3');
          case 3:
            return line.addClass('lt4');
          case 4:
            return line.addClass('lt5');
          default:
            return line.addClass('gt4');
        }
      });
    };
    sanitizeLines = function(lineArray) {
      /*
      		Every line inside a contenteditable field is wrapped
      		in a div EXCEPT for the first line. We can't just select the
      		plain text, so we push the parent element to our stack.
      		Since it's the first element, we don't care about styling
      		because the children's styles will have a higher priority.
      */

      var lineLengths, sanitize, sanitizedLines,
        _this = this;
      sanitizedLines = [];
      lineLengths = [];
      sanitizedLines.push(lineArray.parent());
      lineLengths.push(lineArray.parent().clone().children().remove().end().contents().text().length);
      lineArray.each(sanitize = function(i, line) {
        line = $(line);
        line.removeClass();
        sanitizedLines.push(line);
        return lineLengths.push(line.text().length);
      });
      /*
      		The returned array's elements are jQuery references to the actual
      		DOM elements. Apply styling etc. via jQuery functions only.
      		The number of chars per line is saved in a separate array.
      */

      lineArray.parent().sanitizedLines = sanitizedLines;
      lineArray.parent().lineLengths = lineLengths;
      return [sanitizedLines, lineLengths];
    };
    return stylizeLines(sanitizeLines(typize.children()));
  });

}).call(this);
